/* Generated By:JJTree&JavaCC: Do not edit this line. ScriptingLanguageConstants.java */
package com.zergatul.cheatutils.scripting.generated;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ScriptingLanguageConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 5;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 6;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 7;
  /** RegularExpression Id. */
  int BOOLEAN = 8;
  /** RegularExpression Id. */
  int FALSE = 9;
  /** RegularExpression Id. */
  int FLOAT = 10;
  /** RegularExpression Id. */
  int INT = 11;
  /** RegularExpression Id. */
  int NEW = 12;
  /** RegularExpression Id. */
  int NULL = 13;
  /** RegularExpression Id. */
  int STRING = 14;
  /** RegularExpression Id. */
  int TRUE = 15;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 16;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 17;
  /** RegularExpression Id. */
  int HEX_LITERAL = 18;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 19;
  /** RegularExpression Id. */
  int EXPONENT = 20;
  /** RegularExpression Id. */
  int STRING_LITERAL = 21;
  /** RegularExpression Id. */
  int BREAK = 22;
  /** RegularExpression Id. */
  int CONTINUE = 23;
  /** RegularExpression Id. */
  int ELSE = 24;
  /** RegularExpression Id. */
  int FOR = 25;
  /** RegularExpression Id. */
  int FOREACH = 26;
  /** RegularExpression Id. */
  int IF = 27;
  /** RegularExpression Id. */
  int IN = 28;
  /** RegularExpression Id. */
  int IDENTIFIER = 29;
  /** RegularExpression Id. */
  int LETTER = 30;
  /** RegularExpression Id. */
  int DIGIT = 31;
  /** RegularExpression Id. */
  int LPAREN = 32;
  /** RegularExpression Id. */
  int RPAREN = 33;
  /** RegularExpression Id. */
  int LBRACKET = 34;
  /** RegularExpression Id. */
  int RBRACKET = 35;
  /** RegularExpression Id. */
  int SEMICOLON = 36;
  /** RegularExpression Id. */
  int COMMA = 37;
  /** RegularExpression Id. */
  int DOT = 38;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<SINGLE_LINE_COMMENT>",
    "<FORMAL_COMMENT>",
    "<MULTI_LINE_COMMENT>",
    "\"boolean\"",
    "\"false\"",
    "\"float\"",
    "\"int\"",
    "\"new\"",
    "\"null\"",
    "\"string\"",
    "\"true\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<STRING_LITERAL>",
    "\"break\"",
    "\"continue\"",
    "\"else\"",
    "\"for\"",
    "\"foreach\"",
    "\"if\"",
    "\"in\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"{\"",
    "\"}\"",
    "\"=\"",
    "\"=>\"",
    "\"?\"",
    "\":\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"!/\"",
    "\"!%\"",
    "\"==\"",
    "\"!=\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "\"~\"",
  };

}
