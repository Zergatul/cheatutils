/*
javacc.bat -STATIC:false -OUTPUT_DIRECTORY:C:\Users\Zergatul\source\repos\cheatutils-1.19.2\src\main\java\com\zergatul\cheatutils\scripting C:\Users\Zergatul\source\repos\cheatutils-1.19.2\src\main\java\com\zergatul\cheatutils\ScriptingLanguage.jj
jjtree.bat -STATIC:false -MULTI:true -OUTPUT_DIRECTORY:C:\Users\Zergatul\source\repos\cheatutils-1.19.2\src\main\java\com\zergatul\cheatutils\scripting C:\Users\Zergatul\source\repos\cheatutils-1.19.2\src\main\java\com\zergatul\cheatutils\ScriptingLanguage.jj
javacc.bat -STATIC:false -OUTPUT_DIRECTORY:C:\Users\Zergatul\source\repos\cheatutils-1.19.2\src\main\java\com\zergatul\cheatutils\scripting C:\Users\Zergatul\source\repos\cheatutils-1.19.2\src\main\java\com\zergatul\cheatutils\scripting\ScriptingLanguage.jj.jj
*/

/*
.\jjtree.bat -STATIC:false -MULTI:true -OUTPUT_DIRECTORY:C:\Users\Zergatul\source\repos\cheatutils-1.20\common\java\com\zergatul\cheatutils\scripting\generated C:\Users\Zergatul\source\repos\cheatutils-1.20\common\ScriptingLanguage.jj
.\javacc.bat -STATIC:false -OUTPUT_DIRECTORY:C:\Users\Zergatul\source\repos\cheatutils-1.20\common\java\com\zergatul\cheatutils\scripting\generated C:\Users\Zergatul\source\repos\cheatutils-1.20\common\java\com\zergatul\cheatutils\scripting\generated\ScriptingLanguage.jj.jj
*/

PARSER_BEGIN(ScriptingLanguage)

package com.zergatul.cheatutils.scripting.generated;

public class ScriptingLanguage {
}

PARSER_END(ScriptingLanguage)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN :
{
  < BOOLEAN: "boolean" >
| < FALSE: "false" >
| < FLOAT: "float" >
| < INT: "int" >
| < NEW: "new" >
| < NULL: "null" >
| < STRING: "string" >
| < TRUE: "true" >
}


TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* | "0" >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

TOKEN :
{
  < BREAK: "break" >
| < CONTINUE: "continue" >
| < ELSE: "else">
| < FOR: "for" >
| < FOREACH: "foreach" >
| < IF: "if" >
| < IN: "in" >
}

TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER: ["a"-"z","A"-"Z","_"] >
|
  < #DIGIT: ["0"-"9"] >
}

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

ASTInput Input() :
{}
{
  ( Statement() )* <EOF>
  { return jjtThis; }
}

void Statement() :
{}
{
  Block()
|
  EmptyStatement()
|
  LocalVariableDeclaration() ";"
|
  StatementExpression() ";"
|
  IfStatement()
|
  ForStatement()
|
  ForEachStatement()
|
  BreakStatement()
|
  ContinueStatement()
}

void Block() :
{}
{
  "{" ( BlockStatement() )* "}"
}

void BlockStatement() :
{}
{
  Statement()
}

void EmptyStatement() :
{}
{
  ";"
}

void AssignmentOperator() :
{}
{
  "="
}

void StatementExpression() :
{}
{
  PreIncrementExpression()
|
  PreDecrementExpression()
|
  PrimaryExpression()
  [ Increment() | Decrement() | AssignmentOperator() Expression() ]
}

void LocalVariableDeclaration() :
{}
{
  Type() VariableDeclarator()
}

void VariableDeclarator() :
{}
{
  VariableDeclaratorId() [ "=" VariableInitializer() ]
}

void VariableDeclaratorId() :
{}
{
  Identifier()
}

void VariableInitializer() :
{}
{
  Expression()
}

void IfStatement() :
{}
{
  "if" "(" Expression() ")" Statement() [ LOOKAHEAD(1) "else" Statement() ]
}

void ForStatement() :
{}
{
  "for" "(" [ ForInit() ] ";" [ Expression() ] ";" [ ForUpdate() ] ")" Statement()
}

void ForEachStatement() :
{}
{
  "foreach" "(" LocalVariableDeclaration() "in" Expression() ")" Statement()
}

void ForInit() :
{}
{
  LOOKAHEAD( Type() VariableDeclarator() )
  LocalVariableDeclaration()
|
  StatementExpressionList()
}

void ForUpdate() :
{}
{
  StatementExpressionList()
}

void StatementExpressionList() :
{}
{
  StatementExpression() ( "," StatementExpression() )*
}

void BreakStatement():
{}
{
  "break" ";"
}

void ContinueStatement():
{}
{
  "continue" ";"
}

void Expression() :
{}
{
  LOOKAHEAD(2) LambdaExpression()
|
  ConditionalExpression()
}

void LambdaExpression() :
{}
{
  "(" ")" "=>" Block()
}

void ConditionalExpression() :
{}
{
  ConditionalOrExpression() [ "?" Expression() ":" ConditionalExpression() ]
}

void ConditionalOrExpression() :
{}
{
  ConditionalAndExpression() ( Or() ConditionalAndExpression() )*
}

void ConditionalAndExpression() :
{}
{
  EqualityExpression() ( And() EqualityExpression() )*
}

void EqualityExpression() :
{}
{
  RelationalExpression() ( ( Equality() | Inequality() ) RelationalExpression() )*
}

void RelationalExpression() :
{}
{
  AdditiveExpression() ( ( LessThan() | GreaterThan() | LessEquals() | GreaterEquals() ) AdditiveExpression() )*
}

void AdditiveExpression() :
{}
{
  MultiplicativeExpression() ( LOOKAHEAD(2) ( Plus() | Minus() ) MultiplicativeExpression() )*
}

void MultiplicativeExpression() :
{}
{
  UnaryExpression() ( ( Mult() | Div() | Mod() | FloorDiv() | FloorMod() ) UnaryExpression() )*
}

void UnaryExpression() :
{}
{
  ( Plus() | Minus() ) UnaryExpression()
|
  PreIncrementExpression()
|
  PreDecrementExpression()
|
  UnaryExpressionNotPlusMinus()
}

void PreIncrementExpression():
{}
{
  "++" PrimaryExpression()
}

void PreDecrementExpression():
{}
{
  "--" PrimaryExpression()
}

void UnaryExpressionNotPlusMinus() :
{}
{
  ( Tilde() | Not() ) UnaryExpression()
|
  PrimaryExpression()
}

void PrimaryExpression() :
{}
{
  PrimaryPrefix() ( LOOKAHEAD(2) PrimarySuffix() )*
}

void PrimaryPrefix():
{}
{
  Literal()
|
  "(" Expression() ")"
|
  AllocationExpression()
|
  Name()
}

void AllocationExpression():
{}
{
  "new" Type() "[" Expression() "]"
}

void PrimarySuffix():
{}
{
  "[" Expression() "]"
|
  Arguments()
}

void Arguments() :
{}
{
  "(" [ ArgumentList() ] ")"
}

void ArgumentList() :
{}
{
  Expression() ( "," Expression() )*
}

void Name() :
{}
{
  Identifier() ( LOOKAHEAD(2) "." Identifier() )*
}

void Identifier() :
{
  Token token;
}
{
  token = <IDENTIFIER>
  {
    jjtThis.jjtSetValue(token.image);
  }
}

void Increment() :
{}
{
  "++"
}

void Decrement() :
{}
{
  "--"
}

void Plus() :
{}
{
  "+"
}

void Minus() :
{}
{
  "-"
}

void Mult() :
{}
{
  "*"
}

void Div() :
{}
{
  "/"
}

void Mod() :
{}
{
  "%"
}

void FloorDiv() :
{}
{
  "!/"
}

void FloorMod() :
{}
{
  "!%"
}

void Equality() :
{}
{
  "=="
}

void Inequality() :
{}
{
  "!="
}

void GreaterThan() :
{}
{
  ">"
}

void LessThan() :
{}
{
  "<"
}

void GreaterEquals() :
{}
{
  ">="
}

void LessEquals() :
{}
{
  "<="
}

void And() :
{}
{
  "&&"
}

void Or() :
{}
{
  "||"
}

void Not() :
{}
{
  "!"
}

void Tilde() :
{}
{
  "~"
}

void LeftBracket() :
{}
{
  <LBRACKET>
}

void RightBracket() :
{}
{
  <RBRACKET>
}

void Type() :
{}
{
  PrimitiveType() ( LOOKAHEAD(2) LeftBracket() RightBracket() )*
}

void PrimitiveType() :
{}
{
  BooleanType() | IntType() | FloatType() | StringType()
}

void BooleanType() :
{}
{
  <BOOLEAN>
}

void IntType() :
{}
{
  <INT>
}

void FloatType() :
{}
{
  <FLOAT>
}

void StringType() :
{}
{
  <STRING>
}

void Literal() :
{}
{
  IntegerLiteral()
|
  FloatingPointLiteral()
|
  StringLiteral()
|
  BooleanLiteral()
|
  NullLiteral()
}

void IntegerLiteral() :
{
  Token token;
}
{
  token = <INTEGER_LITERAL>
  {
    jjtThis.jjtSetValue(token.image);
  }
}

void FloatingPointLiteral() :
{
  Token token;
}
{
  token = <FLOATING_POINT_LITERAL>
  {
    jjtThis.jjtSetValue(token.image);
  }
}

void StringLiteral() :
{
  Token token;
}
{
  token = <STRING_LITERAL>
  {
    jjtThis.jjtSetValue(token.image);
  }
}

void BooleanLiteral() :
{
  Token token;
}
{
  token = <TRUE>
  {
    jjtThis.jjtSetValue(true);
  }
|
  token = <FALSE>
  {
    jjtThis.jjtSetValue(false);
  }
}

void NullLiteral() :
{}
{
  "null"
}